DROP TABLE IF EXISTS STAT_RESULTAT CASCADE;
DROP TABLE IF EXISTS TabNOTE CASCADE;
DROP TABLE IF EXISTS MATIERE CASCADE;
DROP TABLE IF EXISTS FORMATION CASCADE;
DROP TABLE IF EXISTS ENSEIGNANT CASCADE;
DROP TABLE IF EXISTS ETUDIANT CASCADE;


DROP TYPE IF EXISTS TMATIERE CASCADE;
DROP TYPE IF EXISTS TFORMATION CASCADE;
DROP TYPE IF EXISTS TENSEIGNANT CASCADE;
DROP TYPE IF EXISTS TETUDIANT CASCADE;


CREATE TYPE TETUDIANT AS 
	(NumEt 		int,
	NomEns 		varchar(30),
	Prenoms 	varchar(30));
CREATE TABLE ETUDIANT OF TETUDIANT;
	


CREATE TYPE TENSEIGNANT AS 
	(NumEns 	INTEGER,
	NomEns 		varchar(30),
	PrenomEns 	varchar(30));
CREATE TABLE ENSEIGNANT of TENSEIGNANT;



CREATE TYPE TFORMATION AS 
	(nomForm 	varchar(30),
	nbretud		INTEGER,
	Ensresp		TENSEIGNANT);	
CREATE TABLE FORMATION OF TFORMATION;


CREATE TYPE TMATIERE AS 
	(Nommat		varchar(30),
	format		TFORMATION,
	Numens		INTEGER,
	coef		float);
CREATE TABLE MATIERE OF TMATIERE;


CREATE TABLE TabNOTE
	(Etudiant	TETUDIANT,
	Matiere		TMATIERE,
	Note		INTEGER);

CREATE TABLE STAT_RESULTAT
	(Forma		TFORMATION,
	moy_general	float,
	nbrRecu		INTEGER,
	nbrEtdPres	INTEGER,
	NoteMax		float,
	NoteMin		float);




INSERT INTO ETUDIANT VALUES (001, 'HUA', 'Vi');
INSERT INTO ETUDIANT VALUES (002, 'CHOUEIB', 'Alex');


INSERT INTO ENSEIGNANT VALUES (1001, 'GENEST', 'DAVID');
INSERT INTO ENSEIGNANT VALUES (1002, 'LESEINT', 'DAVID');

INSERT INTO FORMATION VALUES ('L3', 20, row(1001, 'GENEST', 'DAVID'));
INSERT INTO FORMATION VALUES ('L2', 40, row(1002, 'LESEINT', 'DAVID'));

INSERT INTO MATIERE VALUES ('BDD', row ('L3', 20, row(1001, 'GENEST', 'DAVID')), 4,2);
INSERT INTO MATIERE VALUES ('POO', row ('L2', 40, row(1002, 'LESEINT', 'DAVID')), 10,9);

INSERT INTO TabNOTE VALUES (row(001, 'HUA', 'Vi'), row('BDD', row ('L3', 20, row(1001, 'GENEST', 'DAVID')), 4,2), 20);
INSERT INTO TabNOTE VALUES (row(002, 'CHOUEIB', 'Alex'), row('POO', row ('L2', 40, row(1002, 'LESEINT', 'DAVID')), 10,9), 15);

INSERT INTO STAT_RESULTAT VALUES (row('L3', 20, row(1001, 'GENEST', 'DAVID')), (SELECT Moyenne_Gre()), 15,5,15.0,10);


CREATE OR REPLACE FUNCTION Moyenne_Gre()
	RETURNS FLOAT AS
$$

DECLARE
	notes CURSOR FOR SELECT NOTE FROM TabNOTE;
	SommeNote float = 0.0;
	Somme INTEGER = 0;
BEGIN
	fOR I IN notes
	LOOP
		SommeNote = SommeNote + I.note;
		Somme = Somme + 1;
	END LOOP;
RETURN 	SommeNote/Somme;
END;

$$ LANGUAGE plpgsql;

CREATE TRIGGER re_calcule AFTER DELETE OR INSERT OR UPDATE on TabNote FOR EACH ROW EXECUTE PROCEDURE Moyenne_Gre();

/*
SELECT * FROM FORMATION;
SELECT * FROM MATIERE;
SELECT * FROM TabNOTE;
SELECT * FROM STAT_RESULTAT;
*/

